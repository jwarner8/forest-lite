{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FOREST Lite A lightweight FOREST - F orecast O bservation R esearch E xploration and S urvey T ool Source code FOREST Lite source code is available at GitHub . Production environment To keep things simple the production environment deploys the API and client from the same server running on the same Docker container. export BASE_URL = http://website.com # No trailing / export CONFIG_FILE = /some/config.yaml python server/main.py --port ${ CONTAINER_PORT } When deploying behind a proxy server like NGINX or Traefik it becomes a little difficult to reverse engineer X-Forwarded... headers to create an appropriate baseURL to query the API. For convenience BASE_URL specifies the browser address that users are likely to visit. Development environment The most frictionless workflow takes advantage of auto-reloading and re-compiling features in both webpack-dev-server and uvicorn . API server To run FastAPI to reload on source change run the following command export CONFIG_FILE = path/to/config.yaml cd server/ uvicorn main:app --reload --port 8888 TODO: Make the default port customisable in the dev environment Client server To start the client using webpack-dev-server run the following cd client npm start This will compile and serve the client application at localhost:8080 Developer guide Building the forest-lite client on a new machine requires a recent version of npm . Navigate to the client directory and run npm install to download the required packages into the node_modules directory. The data server Python dependencies are listed in requirements.txt , they can be installed using conda install --file requirements.txt -c conda-forge .","title":"FOREST Lite"},{"location":"#forest-lite","text":"A lightweight FOREST - F orecast O bservation R esearch E xploration and S urvey T ool","title":"FOREST Lite"},{"location":"#source-code","text":"FOREST Lite source code is available at GitHub .","title":"Source code"},{"location":"#production-environment","text":"To keep things simple the production environment deploys the API and client from the same server running on the same Docker container. export BASE_URL = http://website.com # No trailing / export CONFIG_FILE = /some/config.yaml python server/main.py --port ${ CONTAINER_PORT } When deploying behind a proxy server like NGINX or Traefik it becomes a little difficult to reverse engineer X-Forwarded... headers to create an appropriate baseURL to query the API. For convenience BASE_URL specifies the browser address that users are likely to visit.","title":"Production environment"},{"location":"#development-environment","text":"The most frictionless workflow takes advantage of auto-reloading and re-compiling features in both webpack-dev-server and uvicorn .","title":"Development environment"},{"location":"#api-server","text":"To run FastAPI to reload on source change run the following command export CONFIG_FILE = path/to/config.yaml cd server/ uvicorn main:app --reload --port 8888 TODO: Make the default port customisable in the dev environment","title":"API server"},{"location":"#client-server","text":"To start the client using webpack-dev-server run the following cd client npm start This will compile and serve the client application at localhost:8080","title":"Client server"},{"location":"#developer-guide","text":"Building the forest-lite client on a new machine requires a recent version of npm . Navigate to the client directory and run npm install to download the required packages into the node_modules directory. The data server Python dependencies are listed in requirements.txt , they can be installed using conda install --file requirements.txt -c conda-forge .","title":"Developer guide"},{"location":"beginner/","text":"Getting started The command line interface to FOREST-Lite needs a lot of care and attention since the deployed version doesn't use it directly. Future releases will focus on converting this machine-friendly interface into a human-friendly command line utility. AWS EC2 usage A command similar to the following is run inside a Docker container on EC2 behind an NGINX load balancer to deploy FOREST-Lite. Note This is purely illustrative of how FOREST can be run in production. A command line interface should be simpler. # Dockerfile ENV CONFIG_FILE = /path/to/config.yaml ENV DB_FILE = /path/to/config-users.yaml ENV BASE_URL = . ENV SECRET_KEY = fake_key CMD python /path/to/server/main.py --port = 8080 A script could be written to wrap the complexity for new starters and to inform the command line interface of reasonable defaults and pain points. User database A user database can be prepared using a helper command forest_lite database $USER_NAME $PASSWORD $DB_FILE This creates a small yaml file that can be used with the app to allow custom user experiences. This feature should be off by default in future releases. Command line interface The command line interface needs to be upgraded to perform the same tasks as the deployed AWS EC2 configuration. At present it calls the main program with an overridden get_settings function, see forest_lite/cli.py for further details. SECRET_KEY = foo DB_FILE = users.yaml forest_lite view --driver $DRIVER $FILE_NAME As the command line interface is brand new and hasn't been tested with real data milage may vary. Example bash script For convenience the above steps can be merged into a single script. #!/bin/bash DB_DIR = $1 USERNAME = $2 PASSWORD = $3 FILE_NAME = $4 # Update/create users DB forest_lite database $USERNAME $PASSWORD $DB_DIR /users_db.yaml # Start FOREST-Lite server SECRET_KEY = foobar \\ DB_FILE = $DB_DIR /users_db.yaml \\ forest_lite view --driver xarray_h5netcdf $FILE_NAME Note Future releases will focus on simplifying the above command","title":"Getting started"},{"location":"beginner/#getting-started","text":"The command line interface to FOREST-Lite needs a lot of care and attention since the deployed version doesn't use it directly. Future releases will focus on converting this machine-friendly interface into a human-friendly command line utility.","title":"Getting started"},{"location":"beginner/#aws-ec2-usage","text":"A command similar to the following is run inside a Docker container on EC2 behind an NGINX load balancer to deploy FOREST-Lite. Note This is purely illustrative of how FOREST can be run in production. A command line interface should be simpler. # Dockerfile ENV CONFIG_FILE = /path/to/config.yaml ENV DB_FILE = /path/to/config-users.yaml ENV BASE_URL = . ENV SECRET_KEY = fake_key CMD python /path/to/server/main.py --port = 8080 A script could be written to wrap the complexity for new starters and to inform the command line interface of reasonable defaults and pain points.","title":"AWS EC2 usage"},{"location":"beginner/#user-database","text":"A user database can be prepared using a helper command forest_lite database $USER_NAME $PASSWORD $DB_FILE This creates a small yaml file that can be used with the app to allow custom user experiences. This feature should be off by default in future releases.","title":"User database"},{"location":"beginner/#command-line-interface","text":"The command line interface needs to be upgraded to perform the same tasks as the deployed AWS EC2 configuration. At present it calls the main program with an overridden get_settings function, see forest_lite/cli.py for further details. SECRET_KEY = foo DB_FILE = users.yaml forest_lite view --driver $DRIVER $FILE_NAME As the command line interface is brand new and hasn't been tested with real data milage may vary.","title":"Command line interface"},{"location":"beginner/#example-bash-script","text":"For convenience the above steps can be merged into a single script. #!/bin/bash DB_DIR = $1 USERNAME = $2 PASSWORD = $3 FILE_NAME = $4 # Update/create users DB forest_lite database $USERNAME $PASSWORD $DB_DIR /users_db.yaml # Start FOREST-Lite server SECRET_KEY = foobar \\ DB_FILE = $DB_DIR /users_db.yaml \\ forest_lite view --driver xarray_h5netcdf $FILE_NAME Note Future releases will focus on simplifying the above command","title":"Example bash script"},{"location":"design/","text":"Driver proposal To visualise data without prior knowledge of its format, directory structure or whether it is local or remote a general framework is needed. History Early versions to solve this problem focussed on an object-oriented hierarchy. class Driver : def method ( self , ... ): pass Simplest possible interface from forest_lite import api driver_name = \"my_driver\" # Key to map request to settings @api . tile ( driver_name ) def my_custom_func ( driver_settings , datavar , x , y , z , query = None ): \"\"\"A function that replies to a tile endpoint\"\"\" pass","title":"Driver proposal"},{"location":"design/#driver-proposal","text":"To visualise data without prior knowledge of its format, directory structure or whether it is local or remote a general framework is needed.","title":"Driver proposal"},{"location":"design/#history","text":"Early versions to solve this problem focussed on an object-oriented hierarchy. class Driver : def method ( self , ... ): pass","title":"History"},{"location":"design/#simplest-possible-interface","text":"from forest_lite import api driver_name = \"my_driver\" # Key to map request to settings @api . tile ( driver_name ) def my_custom_func ( driver_settings , datavar , x , y , z , query = None ): \"\"\"A function that replies to a tile endpoint\"\"\" pass","title":"Simplest possible interface"}]}